#!/usr/bin/env bash

# Adpated from thoughtbot's laptop script.
# https://github.com/thoughtbot/laptop

laptop_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n[LAPTOP] $fmt\\n" "$@"
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "${HOME}/bin/" ]; then
  mkdir "${HOME}/bin"
fi

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "${LOGNAME}:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "${LOGNAME}:admin" "$HOMEBREW_PREFIX"
fi

update_fish_shell() {
  local shell_path;
  shell_path="$(command -v fish)"

  laptop_echo "Changing your shell to fish ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    laptop_echo "Adding '${shell_path}' to /etc/shells"
    echo "$shell_path" | sudo tee -a /etc/shells
  fi
  sudo chsh -s "$shell_path" "$USER"
}

update_zsh_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  laptop_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    laptop_echo "Adding '${shell_path}' to /etc/shells"
    sudo sh -c "echo ${shell_path} >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  laptop_echo "Installing Homebrew ..."
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
fi

if brew list | grep -Fq brew-cask; then
  laptop_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

laptop_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
# Taps
tap 'github/gh' if OS.mac?
tap 'homebrew/cask-versions' if OS.mac?
tap 'homebrew/cask' if OS.mac?
tap 'homebrew/cask-fonts' if OS.mac?

# Dupes
brew 'coreutils'
brew 'curl'
brew 'diffutils'
brew 'findutils'
brew 'gawk'
brew 'gnu-sed'
brew 'gnu-which'
brew 'grep'
brew 'make'
brew 'rsync'
brew 'wget'

# Development
brew 'travis'
brew 'wakatime-cli'

# Utilities
brew 'bat'
brew 'exa'
brew 'fasd'
brew 'fd'
brew 'fselect'
brew 'fzf'
brew 'gopass'
brew 'htop'
brew 'hyperfine'
brew 'reattach-to-user-namespace'
brew 'rename'
brew 'ripgrep'
brew 'sd'
brew 'speedtest-cli'
brew 'tmux'
brew 'tokei'
brew 'watchexec'

# macOS Utilities
brew 'mas' if OS.mac?
brew 'osxutils' if OS.mac?
brew 'pinentry-mac' if OS.mac?
brew 'trash' if OS.mac?

# Information Utilities
brew 'howdoi'
brew 'tldr'
brew 'wtf'

# Shells
brew 'bash'
brew 'fish'
brew 'zsh'
brew 'antibody'
brew 'starship'

# Programming Languages
brew 'python'

# Utilities
brew 'direnv'
brew 'gnupg'
brew 'openssh'

# Git
brew 'git'
brew 'git-lfs'
brew 'git-secret'
brew 'gh'
brew 'ghi'
brew 'ghq'
brew 'hub'
brew 'lazygit'
brew 'pre-commit'

# Programming Tools
brew 'asdf'
brew 'bats-core'
brew 'shellcheck'

# Python Tools
# brew 'black'
# brew 'flake8'
# brew 'mkdocs'
# brew 'pipenv'

# IDEs & Editors
cask 'jetbrains-toolbox'
cask 'visual-studio-code'

# Virtualization
cask 'virtualbox'
cask 'virtualbox-extension-pack'
cask 'vmware-fusion'

# Images
brew 'imagemagick'
brew 'jpeg'
brew 'libtiff'
brew 'webp'

# Casks
cask '1password'
cask '1password-cli'
cask 'adoptopenjdk'
cask 'aerial'
cask 'alfred'
cask 'cheatsheet'
cask 'dash'
cask 'discord'
cask 'docker'
cask 'dropbox'
cask 'font-fira-code'
cask 'font-fira-code-nerd-font'
cask 'font-jetbrains-mono'
cask 'font-jetbrainsmono-nerd-font'
cask 'firefox'
cask 'firefox-developer-edition'
cask 'google-chrome'
cask 'iterm2'
cask 'mactex'
cask 'microsoft-office-2016'
cask 'microsoft-teams'
cask 'postgres'
cask 'setapp'
cask 'slack'
cask 'spotify'
cask 'transmit'
cask 'whatsapp'
cask 'wireshark'
cask 'yt-music'
cask 'zoomus'

# Mac App Store
mas 'Core Tunnel', id: 1354318707
mas 'Friendly Streaming', id: 553245401
mas 'GarageBand', id: 682658836
mas 'iMovie', id: 408981434
mas 'Jira', id: 1475897096
mas 'Keynote', id: 409183694
mas 'Meeter', id: 1510445899
mas 'Messenger', id: 1480068668
mas 'Numbers', id: 409203825
mas 'Pages', id: 409201541
mas 'Reeder', id: 880001334
mas 'Tailscale', id: 1475387142
mas 'The Unarchiver', id: 425424353

EOF

case "$DEFAULT_SHELL" in
  fish)
    laptop_echo "Your shell preference is set to FISH..."
    update_fish_shell
    ;;
  zsh)
    laptop_echo "Your shell preference is set to ZSH..."
    update_zsh_shell
    ;;
  *)
    laptop_echo "No shell preference detected. Using FISH..."
    update_fish_shell
    ;;
esac

laptop_echo "Configuring asdf version manager..."
if [ ! -d "${HOME}/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.7.7
else
  "${HOME}/.asdf/bin/asdf" update
  "${HOME}/.asdf/bin/asdf" plugin-update --all
fi

install_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  fi
}

# shellcheck disable=SC1090
source "${HOME}/.asdf/asdf.sh"
install_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
install_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"
install_asdf_plugin "python" "https://github.com/asdf-vm/asdf-python.git"

install_asdf_language() {
  local language="$1"
  local version="$2"
  asdf install "$language" "$version"
  asdf global "$language" "$version"
}

laptop_echo "Installing Ruby..."
install_asdf_language "ruby" "$ASDF_RUBY_VERSION"
laptop_echo "Checking which Ruby and Gem installs we are using at this point..."
echo "Ruby --> $(command -v ruby)"
ruby -v
echo "Gem --> $(command -v gem)"
gem -v
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

laptop_echo "Installing default gems..."
gem install bundler
gem install haml_lint
gem install neovim
gem install pry
gem install rubocop
gem install tmuxinator
gem install solargraph

laptop_echo "Installing Node..."
bash "${HOME}/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs" "$ASDF_NODEJS_VERSION"
echo "Node --> $(command -v node)"
node -v
echo "NPM --> $(command -v npm)"
npm -v

laptop_echo "Installing Python..."
install_asdf_language "python" "$ASDF_PYTHON_VERSION"
echo "Python --> $(command -v node)"
python -V

laptop_echo "Laptop installation completed successfully!"
